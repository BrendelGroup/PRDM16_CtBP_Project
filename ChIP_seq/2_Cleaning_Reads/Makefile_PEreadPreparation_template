#Makefile_PEreadPreparation-template
#

SRCDIR            = /opt
SRATOOLKIT        = ${SRCDIR}/sratoolkit.3.1.0-ubuntu64/bin
FASTQC            = ${SRCDIR}/FastQC
TRIMMOMATIC       = ${SRCDIR}/Trimmomatic-0.39/trimmomatic-0.39.jar
ADAPTORS          = ${SRCDIR}/Trimmomatic-0.39/adapters
NGSUTILS          = /usr/local/bin/ngsutilsj
rRNAFILE          = ../../../Genomes/genomeMM39/Mmus_rRNA.fa


#Usage:
#
#  make -j X -f Makefile_PEreadPreparation-LABEL >& err
#
#where X is the number of processors to be used.

#Optional clean-up:
#
#  make -f Makefile_PEreadPreparation-LABEL cleanup

#Please be careful while editing the Makefile as it is 'tab-sensitive'.
#Typical customization should only involve apppropriate editing of the variables in the next section.

##########################Variable Settings#####################################
###
#

FASTQDIR       = ../../../downloads/DOWNLOADdir#	Replace DOWNLOADdir with the appropriate directory name
SAMPLE         = LABEL#  Replace LABEL with an appropriate label

READ1FILE     := chs_${SAMPLE:%=%_R1.fastq}
READ2FILE     := chs_${SAMPLE:%=%_R2.fastq}

#
# FASTQC
FASTQC_OPTIONS    = --threads ${FQO-t} --extract
#
FQO-t      =        2#  number of files which can be processed simultaneously.

#
# TRIMMOMATIC options are explained in detail at http://www.usadellab.org/cms/index.php?page=trimmomatic
#  and the linked manual.
#  Here we show use of five Trimmomatic steps (in that order); to omit a step, leave the corresponding
#  varible blank.
#
TRIMMOMATIC_STEPS =  ${ILLUMINACLIP} ${LEADING} ${SLIDINGWINDOW} ${TRAILING} ${MINLEN} 
ILLUMINACLIP      = ILLUMINACLIP:${TMO-a}:${TMO-i}#   Cut adapter and other illumina-specific sequences from the read.
#ILLUMINACLIP      = #                                 Option left blank; appropriate for pre-clipped data.
LEADING           = LEADING:${TMO-m}#                 Cut bases off the start of a read, if below a threshold quality.
SLIDINGWINDOW     = SLIDINGWINDOW:${TMO-w}:${TMO-m}#  Performs a sliding window trimming approach. It starts scanning
#                                                      at the 5â€Ÿ end and clips the read once the average quality within
#                                                      the window falls below a threshold. 
TRAILING          = TRAILING:${TMO-m}#                Cut bases off the end of a read, if below a threshold quality.
MINLEN            = MINLEN:${TMO-l}#                  Drop the read if it is below the specified length.


#
TMO-p      =                   -phred33#   [-phred33 | -phred64]: using phred + 33 or phred + 64 quality scores
TMO-t      =                          8#   number of threads
TMO-a      =  ${ADAPTORS}/TruSeq2-PE.fa#   ILLUMINACLIP path to a fasta file containing all the adapters, PCR sequences etc.
TMO-i      =                    2:30:15#   ILLUMINACLIP <seed mismatches>:<palindrome clip threshold>:<simple clip threshold>
TMO-w      =                          6#   number of bases to average across
TMO-m      =                         20#   minimum quality required to keep a base
TMO-l      =                         40#   minimum length of reads to be kept


#
TAGDUSTOPTIONS = "-t 8 -dust 97 -fe 3"

################################################################################
### ! Typically there would be no need for further editing below this line ! ###
##
#

##########################Makefile Execution####################################
###
##
#

CLEAN1P             := ${READ1FILE:%_R1.fastq=%_clean_R1.fq}
CLEAN2P             := ${READ2FILE:%_R2.fastq=%_clean_R2.fq}
CLEAN1U             := ${READ1FILE:%_R1.fastq=%_clean_unpaired_R1.fq}
CLEAN2U             := ${READ2FILE:%_R2.fastq=%_clean_unpaired_R2.fq}
CLEANREADS           = ${CLEAN1P} ${CLEAN2P} ${CLEAN1U} ${CLEAN2U}

QUALCHKB1           := ${READ1FILE:%_R1.fastq=FastQCb/%_R1_fastqc/fastqc_data.txt}
QUALCHKB2           := ${READ2FILE:%_R2.fastq=FastQCb/%_R2_fastqc/fastqc_data.txt}

QUALCHKA1            = FastQCa/${SAMPLE}_R1.fq_fastqc/fastqc_data.txt
QUALCHKA2            = FastQCa/${SAMPLE}_R2.fq_fastqc/fastqc_data.txt

#
all:	fastqcb ${CLEANREADS} dustedreads finalreads readsasfasta fastqca

.PHONY:	show

show:	
	@echo ""
	@echo "Show variables {for debugging; invoke with make -f Makefile_PEreadPreparation-template show}:"
	@echo ""
	@echo ${CLEANREADS}
	@echo ""
	@echo ${QUALCHKB1}
	@echo ""


%_R1.fastq:
	ln -s ${FASTQDIR}/$*_R1.fastq $*_R1.fastq

%_R2.fastq:
	ln -s ${FASTQDIR}/$*_R2.fastq $*_R2.fastq


## 2. FastQC before ("B") trimming:
#
fastqcb:	FastQCbdir ${QUALCHKB1} ${QUALCHKB2}

FastQCbdir:	
ifeq ("$(wildcard ./FastQCb)","")
	mkdir FastQCb
endif

FastQCb/%_R1_fastqc/fastqc_data.txt:	%_R1.fastq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCb  $*_R1.fastq

FastQCb/%_R2_fastqc/fastqc_data.txt:	%_R2.fastq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCb  $*_R2.fastq


## 3. Adapter removal and quality trimming with Trimmomatic:
#
%_clean_R1.fq %_clean_R2.fq %_clean_unpaired_R1.fq %_clean_unpaired_R2.fq:	%_R1.fastq %_R2.fastq
	java -jar ${TRIMMOMATIC} PE ${TMO-p} -threads ${TMO-t} \
		$*_R1.fastq $*_R2.fastq \
		$*_clean_R1.fq  $*_clean_unpaired_R1.fq $*_clean_R2.fq $*_clean_unpaired_R2.fq \
		${TRIMMOMATIC_STEPS}


## 4. Tagdust the trimmed reads to remove rRNA-matching reads:
#
dustedreads:	${SAMPLE}_dusted_READ1.fq ${SAMPLE}_dusted_READ2.fq

%_dusted_READ1.fq %_dusted_READ2.fq:	${CLEAN1P} ${CLEAN2P}
	tagdust -ref ${rRNAFILE} \
		${TAGDUSTOPTIONS} -1 R:N -o $*_dusted \
		${CLEAN1P} ${CLEAN2P} \
		>& tagdust_log


## 5. Get rid of the "dusted" label to simplify the output file names:
#
finalreads:	${SAMPLE}_R1.fq ${SAMPLE}_R2.fq

%_R1.fq %_R2.fq:	%_dusted_READ1.fq %_dusted_READ2.fq
	\mv $*_dusted_READ1.fq $*_R1.fq; \mv $*_dusted_READ2.fq $*_R2.fq


## 6. Convert the trimmed reads from fastq to fasta format:
#
readsasfasta:	${SAMPLE}_R1.fa ${SAMPLE}_R2.fa

${SAMPLE}_R1.fa:	${SAMPLE}_R1.fq
	${NGSUTILS} fastq-tofasta ${SAMPLE}_R1.fq > ${SAMPLE}_R1.fa
	
${SAMPLE}_R2.fa:	${SAMPLE}_R2.fq
	${NGSUTILS} fastq-tofasta ${SAMPLE}_R2.fq > ${SAMPLE}_R2.fa


## 7. FastQC after ("A") trimming:
#
fastqca:	FastQCadir ${QUALCHKA1} ${QUALCHKA2}

FastQCadir:	
ifeq ("$(wildcard ./FastQCa)","")
	mkdir FastQCa
endif

FastQCa/%_R1.fq_fastqc/fastqc_data.txt:	%_R1.fq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCa  $*_R1.fq

FastQCa/%_R2.fq_fastqc/fastqc_data.txt:	%_R2.fq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCa  $*_R2.fq


## 8. Cleanup: remove intermediate files that are no longer needed
#
cleanup:
	-\rm ${READ1FILE} ${READ2FILE} ${CLEANREADS}
